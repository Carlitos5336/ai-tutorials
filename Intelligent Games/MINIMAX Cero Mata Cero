{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyMft65Ty+EsZyyOCa1VOuZF"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import numpy as np"],"metadata":{"id":"d1f1Hx5j8haB"},"execution_count":null,"outputs":[]},{"cell_type":"code","execution_count":null,"metadata":{"id":"VRUcVKO47vzZ"},"outputs":[],"source":["class CeroMataCero():\n","\n","  def __init__(self, state=None, turn=1.0):\n","    if state is not None: self.matrix = state\n","    else: self.matrix = np.zeros((3,3))\n","    self.turn = turn\n","    self.mappings = {0: \"-\", 1: \"X\", -1: \"O\"}\n","\n","  def play(self, pos):\n","    if self.matrix[pos] != 0: return False\n","    self.matrix[pos] = self.turn\n","    self.turn = self.whos_next()\n","    return True\n","\n","  def __str__(self):\n","    str_ = []\n","    for row in self.matrix:\n","      str_.append(\" \".join([self.mappings[val] for val in row]))\n","    return str(\"\\n\".join(str_))\n","\n","  def __repr__(self):\n","    return str(self)\n","\n","  def whos_next(self):\n","    return self.turn * -1\n","\n","  def terminal_test(self):\n","    for i in range(3):\n","      if len(set(self.matrix[:, i])) == 1 and self.matrix[0, i] != 0.0: return self.matrix[0, i] * np.inf\n","      if len(set(self.matrix[i, :])) == 1 and self.matrix[i, 0] != 0.0: return self.matrix[i, 0] * np.inf\n","      if len(set(self.matrix[np.eye(3, dtype=\"bool\")])) == 1 and self.matrix[1, 1] != 0.0: return self.matrix[1, 1] * np.inf\n","      if len(set(self.matrix[np.eye(3, dtype=\"bool\")[::-1]])) == 1 and self.matrix[1, 1] != 0.0: return self.matrix[1, 1] * np.inf\n","    if (self.matrix != 0).all(): return 0.0\n","    return None\n","\n","  def children(self):\n","    children = []\n","    for i, row in enumerate(self.matrix):\n","      for j, val in enumerate(row):\n","        if val == 0:\n","          child_state = self.matrix.copy()\n","          child_state[i, j] = self.turn\n","          children.append(CeroMataCero(state=child_state, turn=self.whos_next()))\n","    return children\n","\n","  def heuristic(self):\n","    heuristic = 0\n","    for i, row in enumerate(self.matrix):\n","      for j, val in enumerate(row):\n","        if i > 1:\n","          if self.matrix[i, j] == self.matrix[i-1, j]: heuristic += self.matrix[i, j]\n","        if i < len(self.matrix) - 1:\n","          if self.matrix[i, j] == self.matrix[i+1, j]: heuristic += self.matrix[i, j]\n","        if j > 1:\n","          if self.matrix[i, j] == self.matrix[i, j-1]: heuristic += self.matrix[i, j]\n","        if j < len(self.matrix) - 1:\n","          if self.matrix[i, j] == self.matrix[i, j+1]: heuristic += self.matrix[i, j]\n","    return heuristic\n","\n",""]},{"cell_type":"code","source":["class MinimaxSolver():\n","\n","  def __init__(self, max_depth=10, ts=None, max_time=None, timeit=False):\n","    self.max_depth = max_depth\n","    self.ts = ts\n","    self.max_time = max_time\n","    self.timeit = timeit\n","\n","  def __maximize(self, state, alpha, beta, depth):\n","\n","    if self.timeit:\n","      if time.time() - self.ts >= self.max_time:\n","        return (None, -np.inf)\n","\n","    terminal_val = state.terminal_test()\n","    if terminal_val is not None:\n","      return (None, terminal_val)\n","\n","    if depth >= self.max_depth:\n","      return (None, state.heuristic())\n","\n","    max_child, max_utility = (None, -np.inf)\n","\n","    for child in state.children():\n","\n","      _, utility = self.__minimize(child, alpha, beta, depth + 1)\n","\n","      if utility > max_utility:\n","        max_child, max_utility = child, utility\n","\n","      if max_utility >= beta:\n","        break\n","\n","      alpha = max(alpha, max_utility)\n","\n","    return max_child, max_utility\n","\n","  def __minimize(self, state, alpha, beta, depth):\n","\n","    if self.timeit:\n","      if time.time() - self.ts >= self.max_time:\n","        return (None, -np.inf)\n","\n","    terminal_val = state.terminal_test()\n","    if terminal_val is not None:\n","      return (None, terminal_val)\n","\n","    if depth >= self.max_depth:\n","      return (None, state.heuristic())\n","\n","    min_child, min_utility = (None, np.inf)\n","\n","    for child in state.children():\n","\n","      _, utility = self.__maximize(child, alpha, beta, depth + 1)\n","\n","      if utility < min_utility:\n","        min_child, min_utility = child, utility\n","\n","      if min_utility <= alpha:\n","        break\n","\n","      beta = min(beta, min_utility)\n","\n","    return min_child, min_utility\n","\n","  def solve(self, state):\n","\n","    max_child, _ = self.__maximize(state, -np.inf, np.inf, 0)\n","\n","    return max_child\n"],"metadata":{"id":"R8M2Aj2JHU9B"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["import time"],"metadata":{"id":"mQadIv8EX63m"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["init_state = CeroMataCero()\n","init_state.terminal_test()\n","\n","max_time = 0.5\n","\n","minimax_solver = MinimaxSolver(max_time=max_time, ts=time.time())"],"metadata":{"id":"WIKtA9oWJZPG"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["best_state = None\n","ts = time.time()\n","for depth in range(1, 9):\n","  #print(depth)\n","  minimax_solver.max_depth = depth\n","  best_state = minimax_solver.solve(init_state)\n","  if time.time() - ts >= max_time:\n","    break\n","\n","init_state = best_state\n","init_state"],"metadata":{"id":"bEQn5DBKvXla"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["init_state.play((1,2))\n","init_state"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"z-nlwgQxvYuJ","executionInfo":{"status":"ok","timestamp":1685585885299,"user_tz":240,"elapsed":2,"user":{"displayName":"Carlos Bienvenido Ogando Mont√°s (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"5883b38e-6141-46c6-a5a3-e72a129a2b6d"},"execution_count":null,"outputs":[{"output_type":"execute_result","data":{"text/plain":["X O -\n","X X O\n","- - O"]},"metadata":{},"execution_count":28}]}]}