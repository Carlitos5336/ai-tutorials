{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyOeLOtVWkrhhlN9VvXmp/gD"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import pandas as pd\n","import numpy as np\n","import random"],"metadata":{"id":"Un2bRmhxmdw9","executionInfo":{"status":"ok","timestamp":1701086961665,"user_tz":240,"elapsed":283,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":11,"outputs":[]},{"cell_type":"code","source":["class Encoder():\n","\n","  def __init__(self, values_to_encode=None):\n","    self.encoding_dict = None\n","    self.decoding_dict = None\n","    if values_to_encode: self.build_encodings(values_to_encode)\n","\n","  def build_encodings(self, values):\n","    self.encoding_dict = {v: i for i, v in enumerate(values)}\n","    self.decoding_dict = {i: v for i, v in enumerate(values)}\n","\n","  def encode(self, value):\n","    return self.encoding_dict[value]\n","\n","  def decode(self, value):\n","    return self.decoding_dict[value]"],"metadata":{"id":"TWk6FSuvuNav","executionInfo":{"status":"ok","timestamp":1701086961986,"user_tz":240,"elapsed":3,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["class Graph():\n","\n","  def __init__(self, graph_filepath=None):\n","    self.edges = None\n","    self.place_encoder = None\n","    self.distance_matrix = None\n","    if graph_filepath: self.load_graph_from_excel(graph_filepath)\n","\n","  def load_graph_from_excel(self, filepath, sheet_name=\"grafo\"):\n","    self.edges = pd.read_excel(filepath, sheet_name=sheet_name)\n","    unique_places = list(set(\n","        list(self.edges[\"edge 1\"].values) +\n","        list(self.edges[\"edge 2\"].values)\n","    ))\n","    n_unique_places = len(unique_places)\n","    self.place_encoder = Encoder(list(unique_places))\n","    self.distance_matrix = np.full((n_unique_places, n_unique_places), np.inf)\n","    for _, row in self.edges.iterrows():\n","      (\n","        self.distance_matrix\n","        [self.place_encoder.encode(row[\"edge 1\"])]\n","        [self.place_encoder.encode(row[\"edge 2\"])]\n","      ) = row[\"distance\"]\n","    self.distance_matrix[np.eye(n_unique_places, dtype=\"bool\")] = 0\n","    self.__reduce_distance_matrix()\n","\n","  def __reduce_distance_matrix(self):\n","    n = self.distance_matrix.shape[0]\n","    for k in range(n):\n","        for i in range(n):\n","            for j in range(n):\n","                self.distance_matrix[i][j] = min(\n","                    self.distance_matrix[i][j],\n","                    self.distance_matrix[i][k] + self.distance_matrix[k][j]\n","                )"],"metadata":{"id":"iUC6_fU2rkKW","executionInfo":{"status":"ok","timestamp":1701086962258,"user_tz":240,"elapsed":3,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":13,"outputs":[]},{"cell_type":"code","source":["class GeneticPurchase():\n","\n","  def __init__(self, graph, product_query,\n","               start_place_name=\"Casa\", fuel_cost_per_distance=.1, catalog_filepath=None):\n","    self.graph = graph\n","    self.hub_id = self.graph.place_encoder.encode(start_place_name)\n","    self.product_query = product_query\n","    self.fuel_cost = fuel_cost_per_distance\n","    self.catalog = None\n","    self.product_encoder = None\n","    #self.store_encoder = None\n","    self.price_matrix = None\n","    self.distance_matrix = None\n","    if catalog_filepath: self.load_catalog_from_excel(catalog_filepath)\n","\n","  def load_catalog_from_excel(self, filepath, sheet_name=\"catalogo\"):\n","    self.catalog = pd.read_excel(filepath, sheet_name=sheet_name)\n","    self.product_encoder = Encoder(list(self.catalog[\"product\"].unique()))\n","    #self.store_encoder = Encoder(list(self.catalog[\"store\"].unique()))\n","    self.price_matrix = (\n","      self.catalog\n","      .pivot(index=\"product\", columns=\"store\", values=\"price\")\n","      .rename(index = self.product_encoder.encode, columns = self.graph.place_encoder.encode)\n","      .sort_index(axis=0)\n","      .sort_index(axis=1)\n","      #.to_numpy()\n","    )\n","\n","  def __initialize_population(self, size):\n","    store_ids = list(self.price_matrix.columns)\n","    product_ids = [self.product_encoder.encode(i) for i in self.product_query]\n","    return [[(random.choice(store_ids), product) for product in product_ids] for i in range(size)]\n","\n","  def __get_total_product_cost(self, gene):\n","    return sum([self.price_matrix[store][product] for store, product in gene])\n","\n","  def __get_total_travel_cost(self, gene):\n","    travel_route = list(zip(\n","        [self.hub_id] + [store for store, _ in gene],\n","        [store for store, _ in gene] + [self.hub_id]\n","    ))\n","    return sum([self.graph.distance_matrix[store_a][store_b] * self.fuel_cost for store_a, store_b in travel_route])\n","\n","  def evaluate_solution(self, gene):\n","    return self.__fitness(gene)\n","\n","  def prettify_gene(self, gene):\n","    store_ids, product_ids = list(zip(*gene))\n","    stores = [self.graph.place_encoder.decode(s) for s in store_ids]\n","    products = [self.product_encoder.decode(p) for p in product_ids]\n","    return list(zip(stores, products))\n","\n","  def __fitness(self, gene, replace_nan_with=np.nan):\n","    fitness_value = self.__get_total_product_cost(gene) + self.__get_total_travel_cost(gene)\n","    if np.isnan(fitness_value): fitness_value = replace_nan_with\n","    return fitness_value\n","\n","  def solve(self, n_iters=10, pop_size=100, selection_rate=0.5, mutation_prob=0.1):\n","    population = self.__initialize_population(pop_size)\n","    selection_size = int(pop_size * selection_rate)\n","    children_amount = pop_size - selection_size\n","    for _ in range(n_iters):\n","      best_individuals = self.__selection(population, selection_size)\n","      children = self.__crossover(best_individuals, children_amount)\n","      #children = self.__mutation(children, mutation_prob)\n","      population = best_individuals + children\n","    return self.__selection(population, 1)[0]\n","\n","  def __selection(self, genes, selection_size):\n","    return sorted(genes, key = lambda x: self.__fitness(x, replace_nan_with=np.inf))[:selection_size]\n","\n","  def __crossover(self, genes, children_amount):\n","    children = []\n","    while len(children) < children_amount:\n","      parent_1 = random.choice(genes)\n","      parent_2 = random.choice(genes)\n","      p1_stores, p1_products = list(zip(*parent_1))\n","      p2_stores, p2_products = list(zip(*parent_2))\n","      product_crossover_children = self.__partially_mapped_crossover(p1_products, p2_products)\n","      store_crossover_children = self.__one_point_crossover(p1_stores, p2_stores)\n","      child_1 = list(zip(store_crossover_children[0], product_crossover_children[0]))\n","      child_2 = list(zip(store_crossover_children[1], product_crossover_children[1]))\n","      children += [child_1, child_2]\n","    return children[:children_amount]\n","\n","  def __one_point_crossover(self, parent_1, parent_2, cross_point=None):\n","    if cross_point is None: cross_point = random.randint(0, len(parent_1)-1)\n","    child_1 = parent_1[:cross_point] + parent_2[cross_point:]\n","    child_2 = parent_2[:cross_point] + parent_1[cross_point:]\n","    return child_1, child_2\n","\n","  def __partially_mapped_crossover(self, parent_1, parent_2, cross_point=None):\n","    if cross_point is None: cross_point = random.randint(0, len(parent_1)-1)\n","    mappings = {a: b for a, b in zip(parent_1[:cross_point], parent_2[:cross_point])}\n","    mappings.update({b: a for a, b in zip(parent_1[:cross_point], parent_2[:cross_point])})\n","    child_1 = parent_1[:cross_point] + tuple(mappings.get(i, i) for i in parent_2[cross_point:])\n","    child_2 = parent_2[:cross_point] + tuple(mappings.get(i, i) for i in parent_1[cross_point:])\n","    return child_1, child_2, mappings\n","\n","  def __mutation(self, genes, mutation_prob):\n","    for gene in genes:\n","      if random.random() < mutation_prob:\n","        gene = self.__swap_mutation(gene)\n","    return genes\n","\n","  def __swap_mutation(self, gene):\n","     idx = range(len(gene))\n","     i1, i2 = random.sample(idx, 2)\n","     gene[i1], gene[i2] = gene[i2], gene[i1]\n","     return gene\n","\n"],"metadata":{"id":"nk7TGMsEjCY1","executionInfo":{"status":"ok","timestamp":1701086962258,"user_tz":240,"elapsed":2,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["graph = Graph(graph_filepath=\"catalogo.xlsx\")\n","query = [\n","    \"salmon\",\n","    \"aceite\",\n","    \"bizcocho\",\n","    \"leche\",\n","    \"pan\"\n","  ]\n","solver = GeneticPurchase(graph, query, catalog_filepath=\"catalogo.xlsx\")"],"metadata":{"id":"bDXlhNnxmlEF","executionInfo":{"status":"ok","timestamp":1701087037686,"user_tz":240,"elapsed":220,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":22,"outputs":[]},{"cell_type":"code","source":["best_solution = solver.solve(n_iters=1000)\n","print(solver.prettify_gene(best_solution))\n","print(solver.evaluate_solution(best_solution))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"TlPQsm3NMQPf","executionInfo":{"status":"ok","timestamp":1701087052273,"user_tz":240,"elapsed":4258,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"9a23652e-5357-4df7-a534-11a1129fd907"},"execution_count":24,"outputs":[{"output_type":"stream","name":"stdout","text":["[('Bravo', 'salmon'), ('Bravo', 'aceite'), ('La Sirena', 'bizcocho'), ('Nacional', 'leche'), ('Plaza Lama', 'pan')]\n","143.95\n"]}]}]}