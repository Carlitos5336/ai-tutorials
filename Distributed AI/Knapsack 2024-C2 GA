{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyPz8vn6xouI222vH64Dl/9J"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":11,"metadata":{"id":"lhO1wZcEDvNM","executionInfo":{"status":"ok","timestamp":1729898408097,"user_tz":240,"elapsed":200,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"outputs":[],"source":["import pandas as pd\n","import random as rando\n","import numpy as np"]},{"cell_type":"code","source":["class Item():\n","\n","    def __init__(self, name, price, weight):\n","        self.name = name\n","        self.price = price\n","        self.weight = weight\n","\n","    def __repr__(self):\n","        return f\"Item({self.name}, {self.price}, {self.weight})\""],"metadata":{"id":"SDsw4wGMD2uo","executionInfo":{"status":"ok","timestamp":1729898408287,"user_tz":240,"elapsed":7,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":12,"outputs":[]},{"cell_type":"code","source":["class GeneticSolver():\n","\n","  def __init__(self, n_pob, cap, prob_mut, tas_sel, n_iters=10):\n","    self.n_pob = n_pob\n","    self.prob_mut = prob_mut\n","    self.tas_sel = tas_sel\n","    self.cap = cap\n","    self.n_sel = int(n_pob*tas_sel)\n","    self.n_iters = n_iters\n","    assert 0 <= prob_mut <= 1\n","    assert 0 <= tas_sel <= 1\n","    assert self.n_sel >= 2\n","\n","  def __init_population(self):\n","    return [\"\".join(rando.choices([\"0\", \"1\"], k=10)) for _ in range(self.n_pob)]\n","\n","  def __single_fitness(self, items, p):\n","    total_value = 0\n","    total_weight = 0\n","    for i in range(len(p)):\n","      if p[i] == \"1\":\n","        total_value += items[i].price\n","        total_weight += items[i].weight\n","    if total_weight > self.cap:\n","      total_value = 0\n","    return total_value\n","\n","  def __fitness(self, items, population):\n","    fitness = []\n","    for p in population:\n","      total_value = self.__single_fitness(items, p)\n","      fitness.append(total_value)\n","    return fitness\n","\n","  def __selection(self, pob, fitness):\n","    sel_pob = sorted(list(zip(pob, fitness)), key=lambda x: x[1], reverse=True)[:self.n_sel]\n","    return [p[0] for p in sel_pob]\n","\n","  def __one_point_crossover(self, p1, p2, point=None):\n","    point = rando.randrange(0, len(p1)) if point is None else point\n","    c1 = p1[:point] + p2[point:]\n","    c2 = p2[:point] + p1[point:]\n","    return c1, c2\n","\n","  def __crossover(self, sel_pob):\n","    n_children = self.n_pob - self.n_sel\n","    p1, p2 = rando.sample(sel_pob, 2)\n","    children = set()\n","    while not len(children) >= n_children:\n","      c1, c2 = self.__one_point_crossover(p1, p2)\n","      c1 = self.__mutation(c1)\n","      c2 = self.__mutation(c2)\n","      if c1 not in sel_pob: children.add(c1)\n","      if c2 not in sel_pob: children.add(c2)\n","    return list(children)\n","\n","  def __mutation(self, child):\n","    child = list(child)\n","    for i in range(len(child)):\n","      if rando.random() < self.prob_mut:\n","        child[i] = \"0\" if child[i] == \"1\" else \"1\"\n","    return \"\".join(child)\n","\n","  def solve(self, items):\n","    pob = self.__init_population()\n","    for _ in range(self.n_iters):\n","      #print(f\"Iteration {_+1}/{self.n_iters}...\")\n","      fitness = self.__fitness(items, pob)\n","      sel_pob = self.__selection(pob, fitness)\n","      children = self.__crossover(sel_pob)\n","      pob = sel_pob + children\n","      print((pob[0], self.__single_fitness(items, pob[0])))\n","    return pob[0], self.__single_fitness(items, pob[0])"],"metadata":{"id":"bm0ha5ClEiHt","executionInfo":{"status":"ok","timestamp":1729898460668,"user_tz":240,"elapsed":183,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":18,"outputs":[]},{"cell_type":"code","source":["n_items = 10\n","items = [Item(f\"Item_{i}\", rando.randrange(100, 1000), rando.randrange(10, 100)) for i in range(n_items)]\n","items"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"H2oWrsNFSoJ8","executionInfo":{"status":"ok","timestamp":1729898408287,"user_tz":240,"elapsed":6,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"9ab155ec-d65f-479d-8d76-0ad140008a63"},"execution_count":14,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[Item(Item_0, 332, 84),\n"," Item(Item_1, 387, 52),\n"," Item(Item_2, 762, 38),\n"," Item(Item_3, 949, 32),\n"," Item(Item_4, 815, 43),\n"," Item(Item_5, 539, 17),\n"," Item(Item_6, 291, 36),\n"," Item(Item_7, 159, 23),\n"," Item(Item_8, 787, 77),\n"," Item(Item_9, 480, 71)]"]},"metadata":{},"execution_count":14}]},{"cell_type":"code","source":["# Mejor de corridas independientes en base a diferente 't'\n","for t in range(20):\n","  solver = GeneticSolver(10, 200, 0.1, 0.2, t)\n","  print(solver.solve(items))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"LOrmb7_AE2nP","executionInfo":{"status":"ok","timestamp":1729898408287,"user_tz":240,"elapsed":4,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"f37c35a8-6d28-44bc-e783-d01e6d33b0fe"},"execution_count":15,"outputs":[{"output_type":"stream","name":"stdout","text":["('0010010100', 1460)\n","('0111011100', 3087)\n","('0011010110', 3196)\n","('0011111100', 3515)\n","('0101100001', 2631)\n","('0001110110', 3249)\n","('0011111100', 3515)\n","('0011100010', 3313)\n","('0011100001', 3006)\n","('0011111000', 3356)\n","('0011011010', 3328)\n","('0011111100', 3515)\n","('0001110110', 3249)\n","('0111110000', 3452)\n","('0011111100', 3515)\n","('0011111000', 3356)\n","('0111110000', 3452)\n","('0001110110', 3249)\n","('0011111100', 3515)\n","('0011100010', 3313)\n"]}]},{"cell_type":"code","source":["# Mejor por cada iteración de una misma co\n","solver = GeneticSolver(10, 200, 0.1, 0.2, 20)\n","result = solver.solve(items)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"ew5nZSRx-xGu","executionInfo":{"status":"ok","timestamp":1729898462890,"user_tz":240,"elapsed":179,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"95e5e475-56a0-42c2-f46c-335c2f17a969"},"execution_count":19,"outputs":[{"output_type":"stream","name":"stdout","text":["('0110101100', 2414)\n","('0110101100', 2414)\n","('0101101100', 2601)\n","('0101101100', 2601)\n","('0101101100', 2601)\n","('0101101100', 2601)\n","('0101111000', 2981)\n","('0101111000', 2981)\n","('0101111000', 2981)\n","('0101111000', 2981)\n","('0101111000', 2981)\n","('0001110110', 3249)\n","('0001110110', 3249)\n","('0001110110', 3249)\n","('0011111000', 3356)\n","('0011111000', 3356)\n","('0011111000', 3356)\n","('0011111000', 3356)\n","('0011111000', 3356)\n","('0011111000', 3356)\n"]}]},{"cell_type":"code","source":["result"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"C-bSe4CY-1Nu","executionInfo":{"status":"ok","timestamp":1729898503277,"user_tz":240,"elapsed":194,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"711609e6-1e40-4ec8-f8a5-0c9a5dcac896"},"execution_count":20,"outputs":[{"output_type":"execute_result","data":{"text/plain":["('0011111000', 3356)"]},"metadata":{},"execution_count":20}]}]}