{"cells":[{"cell_type":"code","execution_count":5,"metadata":{"id":"kwerIBtS4xoi","executionInfo":{"status":"ok","timestamp":1709350070817,"user_tz":240,"elapsed":244,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"outputs":[],"source":["import numpy as np\n","import pandas as pd"]},{"cell_type":"code","source":["class ClarkWrightSolver():\n","\n","  def __init__(self):\n","    self.savings = None\n","    self.nodes = None\n","    self.distance_matrix = None\n","\n","  def calculate_savings(self):\n","    # calculate savings for each link\n","    savings = dict()\n","    for r in self.distance_matrix.index:\n","        for c in self.distance_matrix.columns:\n","            if int(c) != int(r):\n","                a = max(int(r), int(c))\n","                b = min(int(r), int(c))\n","                key = '(' + str(a) + ',' + str(b) + ')'\n","                savings[key] = self.nodes['d0'][int(r)] + self.nodes['d0'][int(c)] - self.distance_matrix[c][r]\n","\n","    # put savings in a pandas dataframe, and sort by descending\n","    self.savings = pd.DataFrame.from_dict(savings, orient = 'index')\n","    self.savings.rename(columns = {0:'saving'}, inplace = True)\n","    self.savings.sort_values(by = ['saving'], ascending = False, inplace = True)\n","\n","  # convert link string to link list to handle saving's key, i.e. str(10, 6) to (10, 6)\n","  def get_node(self, link):\n","      link = link[1:]\n","      link = link[:-1]\n","      nodes = link.split(',')\n","      return [int(nodes[0]), int(nodes[1])]\n","\n","  # determine if a node is interior to a route\n","  @staticmethod\n","  def interior(node, route):\n","      try:\n","          i = route.index(node)\n","          # adjacent to depot, not interior\n","          if i == 0 or i == (len(route) - 1):\n","              label = False\n","          else:\n","              label = True\n","      except:\n","          label = False\n","\n","      return label\n","\n","  # merge two routes with a connection link\n","  @staticmethod\n","  def merge(route0, route1, link):\n","      if route0.index(link[0]) != (len(route0) - 1):\n","          route0.reverse()\n","\n","      if route1.index(link[1]) != 0:\n","          route1.reverse()\n","\n","      return route0 + route1\n","\n","  # sum up to obtain the total passengers belonging to a route\n","  def sum_cap(self, route):\n","      sum_cap = 0\n","      for node in route:\n","          sum_cap += self.nodes.demand[node]\n","      return sum_cap\n","\n","  # determine 4 things:\n","  # 1. if the link in any route in routes -> determined by if count_in > 0\n","  # 2. if yes, which node is in the route -> returned to node_sel\n","  # 3. if yes, which route is the node belongs to -> returned to route id: i_route\n","  # 4. are both of the nodes in the same route? -> overlap = 1, yes; otherwise, no\n","  @staticmethod\n","  def which_route(link, routes):\n","      # assume nodes are not in any route\n","      node_sel = list()\n","      i_route = [-1, -1]\n","      count_in = 0\n","\n","      for route in routes:\n","          for node in link:\n","              try:\n","                  route.index(node)\n","                  i_route[count_in] = routes.index(route)\n","                  node_sel.append(node)\n","                  count_in += 1\n","              except:\n","                  pass\n","\n","      if i_route[0] == i_route[1]:\n","          overlap = 1\n","      else:\n","          overlap = 0\n","\n","      return node_sel, count_in, i_route, overlap\n","\n","  def solve(self, nodes, distance_matrix, cap):\n","\n","    self.nodes = nodes\n","    self.distance_matrix = distance_matrix\n","    self.calculate_savings()\n","\n","    # create empty routes\n","    routes = list()\n","\n","    # if there is any remaining customer to be served\n","    remaining = True\n","\n","    # record steps\n","    step = 0\n","\n","    # get a list of nodes, excluding the depot\n","    node_list = list(self.nodes.index)\n","    node_list.remove(0)\n","\n","    # run through each link in the saving list\n","    for link in self.savings.index:\n","        step += 1\n","        if remaining:\n","\n","            #print('step ', step, ':')\n","\n","            link = self.get_node(link)\n","            node_sel, num_in, i_route, overlap = self.which_route(link, routes)\n","\n","            # condition a. Either, neither i nor j have already been assigned to a route,\n","            # ...in which case a new route is initiated including both i and j.\n","            if num_in == 0:\n","                if self.sum_cap(link) <= cap:\n","                    routes.append(link)\n","                    node_list.remove(link[0])\n","                    node_list.remove(link[1])\n","                    #print('\\t','Link ', link, ' fulfills criteria a), so it is created as a new route')\n","                else:\n","                    pass\n","                    #print('\\t','Though Link ', link, ' fulfills criteria a), it exceeds maximum load, so skip this link.')\n","\n","            # condition b. Or, exactly one of the two nodes (i or j) has already been included\n","            # ...in an existing route and that point is not interior to that route\n","            # ...(a point is interior to a route if it is not adjacent to the depot D in the order of traversal of nodes),\n","            # ...in which case the link (i, j) is added to that same route.\n","            elif num_in == 1:\n","                n_sel = node_sel[0]\n","                i_rt = i_route[0]\n","                position = routes[i_rt].index(n_sel)\n","                link_temp = link.copy()\n","                link_temp.remove(n_sel)\n","                node = link_temp[0]\n","\n","                cond1 = (not self.interior(n_sel, routes[i_rt]))\n","                cond2 = (self.sum_cap(routes[i_rt] + [node]) <= cap)\n","\n","                if cond1:\n","                    if cond2:\n","                        #print('\\t','Link ', link, ' fulfills criteria b), so a new node is added to route ', routes[i_rt], '.')\n","                        if position == 0:\n","                            routes[i_rt].insert(0, node)\n","                        else:\n","                            routes[i_rt].append(node)\n","                        node_list.remove(node)\n","                    else:\n","                        #print('\\t','Though Link ', link, ' fulfills criteria b), it exceeds maximum load, so skip this link.')\n","                        continue\n","                else:\n","                    #print('\\t','For Link ', link, ', node ', n_sel, ' is interior to route ', routes[i_rt], ', so skip this link')\n","                    continue\n","\n","            # condition c. Or, both i and j have already been included in two different existing routes\n","            # ...and neither point is interior to its route, in which case the two routes are merged.\n","            else:\n","                if overlap == 0:\n","                    cond1 = (not self.interior(node_sel[0], routes[i_route[0]]))\n","                    cond2 = (not self.interior(node_sel[1], routes[i_route[1]]))\n","                    cond3 = (self.sum_cap(routes[i_route[0]] + routes[i_route[1]]) <= cap)\n","\n","                    if cond1 and cond2:\n","                        if cond3:\n","                            route_temp = self.merge(routes[i_route[0]], routes[i_route[1]], node_sel)\n","                            temp1 = routes[i_route[0]]\n","                            temp2 = routes[i_route[1]]\n","                            routes.remove(temp1)\n","                            routes.remove(temp2)\n","                            routes.append(route_temp)\n","                            try:\n","                                node_list.remove(link[0])\n","                                node_list.remove(link[1])\n","                            except:\n","                                #print('\\t', f\"Node {link[0]} or {link[1]} has been removed in a previous step.\")\n","                                pass\n","                            #print('\\t','Link ', link, ' fulfills criteria c), so route ', temp1, ' and route ', temp2, ' are merged')\n","                        else:\n","                            #print('\\t','Though Link ', link, ' fulfills criteria c), it exceeds maximum load, so skip this link.')\n","                            continue\n","                    else:\n","                        #print('\\t','For link ', link, ', Two nodes are found in two different routes, but not all the nodes fulfill interior requirement, so skip this link')\n","                        continue\n","                else:\n","                    #print('\\t','Link ', link, ' is already included in the routes')\n","                    continue\n","\n","            for route in routes:\n","                pass\n","                #print('\\t','route: ', route, ' with load ', self.sum_cap(route))\n","        else:\n","            #print('-------')\n","            #print('All nodes are included in the routes, algorithm closed')\n","            break\n","\n","        remaining = bool(len(node_list) > 0)\n","\n","    # check if any node is left, assign to a unique route\n","    for node_o in node_list:\n","        routes.append([node_o])\n","\n","    # add depot to the routes\n","    #for route in routes:\n","        #route.insert(0,0)\n","        #route.append(0)\n","\n","    #print('------')\n","    #print('Routes found are: ')\n","\n","    return routes"],"metadata":{"id":"fmjKIH1E6YXg","executionInfo":{"status":"ok","timestamp":1709350071054,"user_tz":240,"elapsed":6,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":6,"outputs":[]},{"cell_type":"code","source":["import itertools, sys, time\n","import numpy as np\n","\n","class BruteForceSolver():\n","\n","  def __init__(self):\n","    self.nodes = None\n","    self.distance_matrix = None\n","\n","  def all_partitions(self, collection):\n","    if len(collection) == 1:\n","      yield [collection]\n","      return\n","    first = collection[0]\n","    for smaller in self.all_partitions(collection[1:]):\n","      for n, subset in enumerate(smaller):\n","        yield smaller[:n] + [[first] + subset] + smaller[n + 1:]\n","      yield [[first]] + smaller\n","\n","  @staticmethod\n","  def get_permutations(data):\n","    return list(itertools.permutations(data))\n","\n","  def sum_cap(self, route):\n","      sum_cap = 0\n","      for node in route:\n","          sum_cap += self.nodes.demand[node]\n","      return sum_cap\n","\n","  def sum_length(self, route):\n","      sum_cap = 0\n","      for i in range(len(route) - 1):\n","          sum_cap += self.distance_matrix[str(route[i])][route[i+1]]\n","      sum_cap += self.nodes[\"d0\"][route[0]] + self.nodes[\"d0\"][route[-1]]\n","      return sum_cap\n","\n","  def solution_length(self, routes):\n","    return sum([self.sum_length(route) for route in routes])\n","\n","  def solve(self, nodes, distance_matrix, cap):\n","    self.distance_matrix = distance_matrix\n","    self.nodes = nodes\n","    best_part = None\n","    best_val = np.inf\n","    for partition in list(self.all_partitions([i for i in self.distance_matrix.index])):\n","      if all([self.sum_cap(route) <= cap for route in partition]):\n","        new_val = 0\n","        new_partition = []\n","        for route in partition:\n","          perms = self.get_permutations(route)\n","          best_min = np.inf\n","          best_perm = None\n","          for perm in perms:\n","            new_min = self.sum_length(perm)\n","            if new_min < best_min:\n","              best_min = new_min\n","              best_perm = perm\n","          new_val += best_min\n","          new_partition.append(list(best_perm))\n","        if new_val < best_val:\n","          best_part = new_partition\n","          best_val = new_val\n","    return best_part"],"metadata":{"id":"GySq1fNo-oel","executionInfo":{"status":"ok","timestamp":1709350071055,"user_tz":240,"elapsed":6,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":7,"outputs":[]},{"cell_type":"code","execution_count":8,"metadata":{"id":"A25ERyoy4xoj","executionInfo":{"status":"ok","timestamp":1709350071055,"user_tz":240,"elapsed":6,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"colab":{"base_uri":"https://localhost:8080/","height":394},"outputId":"564977e1-88f8-4c05-83d1-9459b592e954"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["      d0  demand\n","node            \n","0      0       0\n","1     25       4\n","2     43       6\n","3     57       5\n","4     43       4\n","5     61       7\n","6     29       3\n","7     41       5\n","8     48       4\n","9     71       4"],"text/html":["\n","  <div id=\"df-0bd96882-14c0-4cbb-bf52-68b96dce644a\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>d0</th>\n","      <th>demand</th>\n","    </tr>\n","    <tr>\n","      <th>node</th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>0</td>\n","      <td>0</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>25</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>43</td>\n","      <td>6</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>57</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>43</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>61</td>\n","      <td>7</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>29</td>\n","      <td>3</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>41</td>\n","      <td>5</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>48</td>\n","      <td>4</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>71</td>\n","      <td>4</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0bd96882-14c0-4cbb-bf52-68b96dce644a')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0bd96882-14c0-4cbb-bf52-68b96dce644a button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0bd96882-14c0-4cbb-bf52-68b96dce644a');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-2fcc05a2-61d7-4737-9016-14229283e947\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-2fcc05a2-61d7-4737-9016-14229283e947')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-2fcc05a2-61d7-4737-9016-14229283e947 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_d53c7d99-79f8-48f4-88d4-ff1ea18ae985\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('nodes')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_d53c7d99-79f8-48f4-88d4-ff1ea18ae985 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('nodes');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"nodes","summary":"{\n  \"name\": \"nodes\",\n  \"rows\": 10,\n  \"fields\": [\n    {\n      \"column\": \"d0\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 20,\n        \"min\": 0,\n        \"max\": 71,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          48,\n          25,\n          29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"demand\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 1,\n        \"min\": 0,\n        \"max\": 7,\n        \"num_unique_values\": 6,\n        \"samples\": [\n          0,\n          4,\n          3\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":8}],"source":["# read node data in coordinate (x,y) format\n","nodes = pd.read_csv('demand.csv', index_col = 'node')\n","nodes.rename(columns={\"distance to depot\":'d0'}, inplace = True)\n","nodes"]},{"cell_type":"code","execution_count":9,"metadata":{"id":"uNohFfuB4xol","executionInfo":{"status":"ok","timestamp":1709350071055,"user_tz":240,"elapsed":5,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"colab":{"base_uri":"https://localhost:8080/","height":345},"outputId":"e1e7af60-55ea-422e-9ea7-10472b053430"},"outputs":[{"output_type":"execute_result","data":{"text/plain":["    1    2    3   4   5   6   7   8    9\n","                                        \n","1   0   29   34  43  68  49  66  72   91\n","2  29    0   52  72  96  72  81  89  114\n","3  34   52    0  45  71  71  95  99  108\n","4  43   72   45   0  27  36  65  65   65\n","5  68   96   71  27   0  40  66  62   46\n","6  49   72   71  36  40   0  31  31   43\n","7  66   81   95  65  66  31   0  11   46\n","8  72   89   99  65  62  31  11   0   36\n","9  91  114  108  65  46  43  46  36    0"],"text/html":["\n","  <div id=\"df-0366c790-dadb-4cb0-8b4f-2017fe8be2b2\" class=\"colab-df-container\">\n","    <div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>1</th>\n","      <th>2</th>\n","      <th>3</th>\n","      <th>4</th>\n","      <th>5</th>\n","      <th>6</th>\n","      <th>7</th>\n","      <th>8</th>\n","      <th>9</th>\n","    </tr>\n","    <tr>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","      <th></th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>1</th>\n","      <td>0</td>\n","      <td>29</td>\n","      <td>34</td>\n","      <td>43</td>\n","      <td>68</td>\n","      <td>49</td>\n","      <td>66</td>\n","      <td>72</td>\n","      <td>91</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>29</td>\n","      <td>0</td>\n","      <td>52</td>\n","      <td>72</td>\n","      <td>96</td>\n","      <td>72</td>\n","      <td>81</td>\n","      <td>89</td>\n","      <td>114</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>34</td>\n","      <td>52</td>\n","      <td>0</td>\n","      <td>45</td>\n","      <td>71</td>\n","      <td>71</td>\n","      <td>95</td>\n","      <td>99</td>\n","      <td>108</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>43</td>\n","      <td>72</td>\n","      <td>45</td>\n","      <td>0</td>\n","      <td>27</td>\n","      <td>36</td>\n","      <td>65</td>\n","      <td>65</td>\n","      <td>65</td>\n","    </tr>\n","    <tr>\n","      <th>5</th>\n","      <td>68</td>\n","      <td>96</td>\n","      <td>71</td>\n","      <td>27</td>\n","      <td>0</td>\n","      <td>40</td>\n","      <td>66</td>\n","      <td>62</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>6</th>\n","      <td>49</td>\n","      <td>72</td>\n","      <td>71</td>\n","      <td>36</td>\n","      <td>40</td>\n","      <td>0</td>\n","      <td>31</td>\n","      <td>31</td>\n","      <td>43</td>\n","    </tr>\n","    <tr>\n","      <th>7</th>\n","      <td>66</td>\n","      <td>81</td>\n","      <td>95</td>\n","      <td>65</td>\n","      <td>66</td>\n","      <td>31</td>\n","      <td>0</td>\n","      <td>11</td>\n","      <td>46</td>\n","    </tr>\n","    <tr>\n","      <th>8</th>\n","      <td>72</td>\n","      <td>89</td>\n","      <td>99</td>\n","      <td>65</td>\n","      <td>62</td>\n","      <td>31</td>\n","      <td>11</td>\n","      <td>0</td>\n","      <td>36</td>\n","    </tr>\n","    <tr>\n","      <th>9</th>\n","      <td>91</td>\n","      <td>114</td>\n","      <td>108</td>\n","      <td>65</td>\n","      <td>46</td>\n","      <td>43</td>\n","      <td>46</td>\n","      <td>36</td>\n","      <td>0</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>\n","    <div class=\"colab-df-buttons\">\n","\n","  <div class=\"colab-df-container\">\n","    <button class=\"colab-df-convert\" onclick=\"convertToInteractive('df-0366c790-dadb-4cb0-8b4f-2017fe8be2b2')\"\n","            title=\"Convert this dataframe to an interactive table.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\" viewBox=\"0 -960 960 960\">\n","    <path d=\"M120-120v-720h720v720H120Zm60-500h600v-160H180v160Zm220 220h160v-160H400v160Zm0 220h160v-160H400v160ZM180-400h160v-160H180v160Zm440 0h160v-160H620v160ZM180-180h160v-160H180v160Zm440 0h160v-160H620v160Z\"/>\n","  </svg>\n","    </button>\n","\n","  <style>\n","    .colab-df-container {\n","      display:flex;\n","      gap: 12px;\n","    }\n","\n","    .colab-df-convert {\n","      background-color: #E8F0FE;\n","      border: none;\n","      border-radius: 50%;\n","      cursor: pointer;\n","      display: none;\n","      fill: #1967D2;\n","      height: 32px;\n","      padding: 0 0 0 0;\n","      width: 32px;\n","    }\n","\n","    .colab-df-convert:hover {\n","      background-color: #E2EBFA;\n","      box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","      fill: #174EA6;\n","    }\n","\n","    .colab-df-buttons div {\n","      margin-bottom: 4px;\n","    }\n","\n","    [theme=dark] .colab-df-convert {\n","      background-color: #3B4455;\n","      fill: #D2E3FC;\n","    }\n","\n","    [theme=dark] .colab-df-convert:hover {\n","      background-color: #434B5C;\n","      box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","      filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","      fill: #FFFFFF;\n","    }\n","  </style>\n","\n","    <script>\n","      const buttonEl =\n","        document.querySelector('#df-0366c790-dadb-4cb0-8b4f-2017fe8be2b2 button.colab-df-convert');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      async function convertToInteractive(key) {\n","        const element = document.querySelector('#df-0366c790-dadb-4cb0-8b4f-2017fe8be2b2');\n","        const dataTable =\n","          await google.colab.kernel.invokeFunction('convertToInteractive',\n","                                                    [key], {});\n","        if (!dataTable) return;\n","\n","        const docLinkHtml = 'Like what you see? Visit the ' +\n","          '<a target=\"_blank\" href=https://colab.research.google.com/notebooks/data_table.ipynb>data table notebook</a>'\n","          + ' to learn more about interactive tables.';\n","        element.innerHTML = '';\n","        dataTable['output_type'] = 'display_data';\n","        await google.colab.output.renderOutput(dataTable, element);\n","        const docLink = document.createElement('div');\n","        docLink.innerHTML = docLinkHtml;\n","        element.appendChild(docLink);\n","      }\n","    </script>\n","  </div>\n","\n","\n","<div id=\"df-9ff8b92d-6e93-442a-aeb8-2d1df8e8db47\">\n","  <button class=\"colab-df-quickchart\" onclick=\"quickchart('df-9ff8b92d-6e93-442a-aeb8-2d1df8e8db47')\"\n","            title=\"Suggest charts\"\n","            style=\"display:none;\">\n","\n","<svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","     width=\"24px\">\n","    <g>\n","        <path d=\"M19 3H5c-1.1 0-2 .9-2 2v14c0 1.1.9 2 2 2h14c1.1 0 2-.9 2-2V5c0-1.1-.9-2-2-2zM9 17H7v-7h2v7zm4 0h-2V7h2v10zm4 0h-2v-4h2v4z\"/>\n","    </g>\n","</svg>\n","  </button>\n","\n","<style>\n","  .colab-df-quickchart {\n","      --bg-color: #E8F0FE;\n","      --fill-color: #1967D2;\n","      --hover-bg-color: #E2EBFA;\n","      --hover-fill-color: #174EA6;\n","      --disabled-fill-color: #AAA;\n","      --disabled-bg-color: #DDD;\n","  }\n","\n","  [theme=dark] .colab-df-quickchart {\n","      --bg-color: #3B4455;\n","      --fill-color: #D2E3FC;\n","      --hover-bg-color: #434B5C;\n","      --hover-fill-color: #FFFFFF;\n","      --disabled-bg-color: #3B4455;\n","      --disabled-fill-color: #666;\n","  }\n","\n","  .colab-df-quickchart {\n","    background-color: var(--bg-color);\n","    border: none;\n","    border-radius: 50%;\n","    cursor: pointer;\n","    display: none;\n","    fill: var(--fill-color);\n","    height: 32px;\n","    padding: 0;\n","    width: 32px;\n","  }\n","\n","  .colab-df-quickchart:hover {\n","    background-color: var(--hover-bg-color);\n","    box-shadow: 0 1px 2px rgba(60, 64, 67, 0.3), 0 1px 3px 1px rgba(60, 64, 67, 0.15);\n","    fill: var(--button-hover-fill-color);\n","  }\n","\n","  .colab-df-quickchart-complete:disabled,\n","  .colab-df-quickchart-complete:disabled:hover {\n","    background-color: var(--disabled-bg-color);\n","    fill: var(--disabled-fill-color);\n","    box-shadow: none;\n","  }\n","\n","  .colab-df-spinner {\n","    border: 2px solid var(--fill-color);\n","    border-color: transparent;\n","    border-bottom-color: var(--fill-color);\n","    animation:\n","      spin 1s steps(1) infinite;\n","  }\n","\n","  @keyframes spin {\n","    0% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","      border-left-color: var(--fill-color);\n","    }\n","    20% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    30% {\n","      border-color: transparent;\n","      border-left-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","      border-right-color: var(--fill-color);\n","    }\n","    40% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-top-color: var(--fill-color);\n","    }\n","    60% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","    }\n","    80% {\n","      border-color: transparent;\n","      border-right-color: var(--fill-color);\n","      border-bottom-color: var(--fill-color);\n","    }\n","    90% {\n","      border-color: transparent;\n","      border-bottom-color: var(--fill-color);\n","    }\n","  }\n","</style>\n","\n","  <script>\n","    async function quickchart(key) {\n","      const quickchartButtonEl =\n","        document.querySelector('#' + key + ' button');\n","      quickchartButtonEl.disabled = true;  // To prevent multiple clicks.\n","      quickchartButtonEl.classList.add('colab-df-spinner');\n","      try {\n","        const charts = await google.colab.kernel.invokeFunction(\n","            'suggestCharts', [key], {});\n","      } catch (error) {\n","        console.error('Error during call to suggestCharts:', error);\n","      }\n","      quickchartButtonEl.classList.remove('colab-df-spinner');\n","      quickchartButtonEl.classList.add('colab-df-quickchart-complete');\n","    }\n","    (() => {\n","      let quickchartButtonEl =\n","        document.querySelector('#df-9ff8b92d-6e93-442a-aeb8-2d1df8e8db47 button');\n","      quickchartButtonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","    })();\n","  </script>\n","</div>\n","\n","  <div id=\"id_f9b41121-cc71-4659-9673-fbe66f0cba77\">\n","    <style>\n","      .colab-df-generate {\n","        background-color: #E8F0FE;\n","        border: none;\n","        border-radius: 50%;\n","        cursor: pointer;\n","        display: none;\n","        fill: #1967D2;\n","        height: 32px;\n","        padding: 0 0 0 0;\n","        width: 32px;\n","      }\n","\n","      .colab-df-generate:hover {\n","        background-color: #E2EBFA;\n","        box-shadow: 0px 1px 2px rgba(60, 64, 67, 0.3), 0px 1px 3px 1px rgba(60, 64, 67, 0.15);\n","        fill: #174EA6;\n","      }\n","\n","      [theme=dark] .colab-df-generate {\n","        background-color: #3B4455;\n","        fill: #D2E3FC;\n","      }\n","\n","      [theme=dark] .colab-df-generate:hover {\n","        background-color: #434B5C;\n","        box-shadow: 0px 1px 3px 1px rgba(0, 0, 0, 0.15);\n","        filter: drop-shadow(0px 1px 2px rgba(0, 0, 0, 0.3));\n","        fill: #FFFFFF;\n","      }\n","    </style>\n","    <button class=\"colab-df-generate\" onclick=\"generateWithVariable('pw')\"\n","            title=\"Generate code using this dataframe.\"\n","            style=\"display:none;\">\n","\n","  <svg xmlns=\"http://www.w3.org/2000/svg\" height=\"24px\"viewBox=\"0 0 24 24\"\n","       width=\"24px\">\n","    <path d=\"M7,19H8.4L18.45,9,17,7.55,7,17.6ZM5,21V16.75L18.45,3.32a2,2,0,0,1,2.83,0l1.4,1.43a1.91,1.91,0,0,1,.58,1.4,1.91,1.91,0,0,1-.58,1.4L9.25,21ZM18.45,9,17,7.55Zm-12,3A5.31,5.31,0,0,0,4.9,8.1,5.31,5.31,0,0,0,1,6.5,5.31,5.31,0,0,0,4.9,4.9,5.31,5.31,0,0,0,6.5,1,5.31,5.31,0,0,0,8.1,4.9,5.31,5.31,0,0,0,12,6.5,5.46,5.46,0,0,0,6.5,12Z\"/>\n","  </svg>\n","    </button>\n","    <script>\n","      (() => {\n","      const buttonEl =\n","        document.querySelector('#id_f9b41121-cc71-4659-9673-fbe66f0cba77 button.colab-df-generate');\n","      buttonEl.style.display =\n","        google.colab.kernel.accessAllowed ? 'block' : 'none';\n","\n","      buttonEl.onclick = () => {\n","        google.colab.notebook.generateWithVariable('pw');\n","      }\n","      })();\n","    </script>\n","  </div>\n","\n","    </div>\n","  </div>\n"],"application/vnd.google.colaboratory.intrinsic+json":{"type":"dataframe","variable_name":"pw","summary":"{\n  \"name\": \"pw\",\n  \"rows\": 9,\n  \"fields\": [\n    {\n      \"column\": \"1\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 27,\n        \"min\": 0,\n        \"max\": 91,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          72,\n          29,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"2\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 35,\n        \"min\": 0,\n        \"max\": 114,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          0,\n          81,\n          29\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"3\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34,\n        \"min\": 0,\n        \"max\": 108,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          52,\n          95,\n          34\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"4\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 23,\n        \"min\": 0,\n        \"max\": 72,\n        \"num_unique_values\": 7,\n        \"samples\": [\n          43,\n          72,\n          36\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"5\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 28,\n        \"min\": 0,\n        \"max\": 96,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          62,\n          96,\n          40\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"6\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 21,\n        \"min\": 0,\n        \"max\": 72,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          72,\n          0,\n          49\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"7\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 31,\n        \"min\": 0,\n        \"max\": 95,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          81,\n          0,\n          66\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"8\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 34,\n        \"min\": 0,\n        \"max\": 99,\n        \"num_unique_values\": 9,\n        \"samples\": [\n          0,\n          89,\n          31\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    },\n    {\n      \"column\": \"9\",\n      \"properties\": {\n        \"dtype\": \"number\",\n        \"std\": 37,\n        \"min\": 0,\n        \"max\": 114,\n        \"num_unique_values\": 8,\n        \"samples\": [\n          114,\n          43,\n          91\n        ],\n        \"semantic_type\": \"\",\n        \"description\": \"\"\n      }\n    }\n  ]\n}"}},"metadata":{},"execution_count":9}],"source":["# read pairwise distance\n","pw = pd.read_csv('pairwise.csv', index_col = 'Unnamed: 0')\n","pw.index.rename('',inplace = True)\n","pw"]},{"cell_type":"code","source":["capacity = 20\n","cw_solver = ClarkWrightSolver()\n","cw_route = cw_solver.solve(nodes, pw, capacity)\n","cw_route"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"HS7CjfC79Wdt","executionInfo":{"status":"ok","timestamp":1709350071282,"user_tz":240,"elapsed":231,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"60dd891f-909d-4e8f-ce86-ef97cfde3e72"},"execution_count":10,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[7, 8, 9, 5], [4, 3, 2, 1], [6]]"]},"metadata":{},"execution_count":10}]},{"cell_type":"code","source":["bf_solver = BruteForceSolver()\n","bf_route = bf_solver.solve(nodes, pw, capacity)\n","bf_route"],"metadata":{"id":"XB7wWsEzDoPa","colab":{"base_uri":"https://localhost:8080/"},"executionInfo":{"status":"ok","timestamp":1709350084221,"user_tz":240,"elapsed":12940,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"0260ad64-783a-4ed0-eecc-39dd6b5d0e54"},"execution_count":11,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[2], [1, 3, 4, 5], [6, 9, 8, 7]]"]},"metadata":{},"execution_count":11}]},{"cell_type":"code","source":["print(cw_route, bf_solver.solution_length(cw_route))\n","print(bf_route, bf_solver.solution_length(bf_route))"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"OM6P1iwctxZy","executionInfo":{"status":"ok","timestamp":1709350084221,"user_tz":240,"elapsed":7,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"23ac993c-9c16-4cd9-8e79-77be958461f2"},"execution_count":12,"outputs":[{"output_type":"stream","name":"stdout","text":["[[7, 8, 9, 5], [4, 3, 2, 1], [6]] 447\n","[[2], [1, 3, 4, 5], [6, 9, 8, 7]] 438\n"]}]},{"cell_type":"code","source":["dm = pd.read_parquet(\"small-10n-c80_120-d10_50_dm.parquet\")"],"metadata":{"id":"nOoL_91cyhMX","executionInfo":{"status":"ok","timestamp":1709350115322,"user_tz":240,"elapsed":217,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":14,"outputs":[]},{"cell_type":"code","source":["nodes = pd.read_parquet(\"small-10n-c80_120-d10_50_nodes.parquet\")"],"metadata":{"id":"G2anviPbykKu","executionInfo":{"status":"ok","timestamp":1709350117901,"user_tz":240,"elapsed":227,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":15,"outputs":[]},{"cell_type":"code","source":["d = np.array(dm)\n","d[np.identity(d.shape[0], dtype=\"bool\")] = np.inf\n","tau = np.ones(d.shape)\n","tau_d = np.zeros(d.shape)\n","neta = 1/d\n","\n","alpha = 1\n","beta = 1\n","rho = 0.5\n","max_iters = 100\n","ants = 10\n","cap = 80\n","\n","initial_state = 0\n","\n","for iter in range(max_iters):\n","  paths = []\n","  global_unvisited = [i for i in range(1, d.shape[0])]\n","  print(global_unvisited)\n","  for ant in range(ants):\n","    capacity = cap\n","    path = []\n","    unvisited = [0] + [i for i in global_unvisited]\n","    idx = initial_state\n","    unvisited.remove(idx)\n","    path.append(idx)\n","    while len(unvisited) != 0:\n","      w = tau**alpha * neta**beta\n","      unv_filter = [i for i in unvisited if capacity - nodes.loc[i, \"demand\"] >= 0]\n","      #print(unv_filter)\n","      if len(unv_filter) == 0: break\n","      w = w[unv_filter]\n","      p = w/sum(w)\n","      idx = np.random.choice(unv_filter, p=p[:,idx])\n","      unvisited.remove(idx)\n","      if idx != 0: global_unvisited.remove(idx)\n","      path.append(idx)\n","      capacity -= nodes.loc[idx, \"demand\"]\n","      if len(global_unvisited) == 0:\n","        break\n","        #global_unvisited = [i for i in range(1, d.shape[0])]\n","    path.append(initial_state)\n","    dt = 0\n","    ct = 0\n","    for i in range(len(path)-1):\n","      dt += d[path[i], path[i+1]]\n","      ct += nodes.loc[i, \"demand\"]\n","    dp = 1/dt\n","    if dt == 0: continue\n","    for i in range(len(path)-1):\n","      tau_d[path[i], path[i+1]] += dp\n","      tau_d[path[i+1], path[i]] += dp\n","    paths.append(path)\n","    #print(f\"Ant {ant} path: {path}. Total distance: {dt}. Total pheromones: {dp}\")\n","  tau = (1 - rho) * tau + tau_d"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"R-RN31Crxsiv","executionInfo":{"status":"ok","timestamp":1709350119958,"user_tz":240,"elapsed":497,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"24747c4a-b99b-45d5-dbbb-1f497d4e6bb7"},"execution_count":16,"outputs":[{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n"]},{"output_type":"stream","name":"stderr","text":["<ipython-input-16-652d68ba2c5a>:33: RuntimeWarning: invalid value encountered in divide\n","  p = w/sum(w)\n"]},{"output_type":"stream","name":"stdout","text":["[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n","[1, 2, 3, 4, 5, 6, 7, 8, 9]\n"]}]},{"cell_type":"code","source":["[i[1:-1] for i in paths if len(i) != 2]"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2EBuQRlh2RRp","executionInfo":{"status":"ok","timestamp":1709350123248,"user_tz":240,"elapsed":295,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"ca40ac35-b17a-4bb3-b61a-be844d17a253"},"execution_count":17,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[8, 7, 2], [3, 9], [1, 5], [6, 4]]"]},"metadata":{},"execution_count":17}]},{"cell_type":"code","source":["from collections import Counter\n","def aco(dm, tpath):\n","\n","  d = np.array(dm)\n","  d[np.identity(d.shape[0], dtype=\"bool\")] = np.inf\n","\n","  tau = np.ones(d.shape)\n","  tau_d = np.zeros(d.shape)\n","  neta = 1/d\n","\n","  alpha = 1\n","  beta = 1\n","  rho = 0.5\n","  max_iters = 100\n","  ants = 10\n","\n","  initial_state = 0\n","\n","\n","  for iter in range(max_iters):\n","    paths = []\n","    for ant in range(ants):\n","      path = []\n","      unvisited = [0] + tpath.copy()\n","      idx = initial_state\n","      unvisited.remove(idx)\n","      path.append(idx)\n","      while len(unvisited) != 0:\n","        w = tau**alpha * neta**beta\n","        w = w[unvisited]\n","        p = w/sum(w)\n","        idx = np.random.choice(unvisited, p=p[:,idx])\n","        unvisited.remove(idx)\n","        path.append(idx)\n","      path.append(initial_state)\n","      dt = 0\n","      for i in range(len(path)-1):\n","        dt += d[path[i], path[i+1]]\n","      dp = 1/dt\n","      for i in range(len(path)-1):\n","        tau_d[path[i], path[i+1]] += dp\n","        tau_d[path[i+1], path[i]] += dp\n","      paths.append(path)\n","      #print(f\"Ant {ant} path: {path}. Total distance: {dt}. Total pheromones: {dp}\")\n","    tau = (1 - rho) * tau + tau_d\n","  return paths"],"metadata":{"id":"enUYmHzS2iQF","executionInfo":{"status":"ok","timestamp":1709350142852,"user_tz":240,"elapsed":256,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":19,"outputs":[]},{"cell_type":"code","source":["ans = aco(dm, [2, 7, 8])"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Sv18MaDy4xar","executionInfo":{"status":"ok","timestamp":1709350148321,"user_tz":240,"elapsed":903,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"35dcc9e2-6695-439d-88fb-f1a327fe5c3f"},"execution_count":21,"outputs":[{"output_type":"stream","name":"stderr","text":["<ipython-input-19-013673352b95>:31: RuntimeWarning: invalid value encountered in divide\n","  p = w/sum(w)\n"]}]},{"cell_type":"code","source":["[int(j) for j in Counter([\"\".join([str(i) for i in path]) for path in paths]).most_common(1)[0][0]][1:-1]"],"metadata":{"id":"Y7wKPbJHNXYc"},"execution_count":null,"outputs":[]},{"cell_type":"code","source":["[int(j) for j in ounter([\"|\".join([str(i) for i in path]) for path in ans]).most_common(1)[0][0].split(\"|\")"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"GDFSRxitNauq","executionInfo":{"status":"ok","timestamp":1709350212382,"user_tz":240,"elapsed":232,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"0a834bd9-d594-40e5-e275-1befe8b3f41d"},"execution_count":28,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['0', '8', '7', '2', '0']"]},"metadata":{},"execution_count":28}]},{"cell_type":"code","source":["ans"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"AJBVP1hxNWMr","executionInfo":{"status":"ok","timestamp":1709350152421,"user_tz":240,"elapsed":1,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"4afc871c-eeb8-461d-babf-075317e307ab"},"execution_count":22,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[[0, 2, 7, 8, 0],\n"," [0, 2, 7, 8, 0],\n"," [0, 8, 7, 2, 0],\n"," [0, 8, 2, 7, 0],\n"," [0, 7, 2, 8, 0],\n"," [0, 8, 7, 2, 0],\n"," [0, 8, 7, 2, 0],\n"," [0, 7, 2, 8, 0],\n"," [0, 8, 7, 2, 0],\n"," [0, 8, 2, 7, 0]]"]},"metadata":{},"execution_count":22}]}],"metadata":{"kernelspec":{"display_name":"Python 3","language":"python","name":"python3"},"language_info":{"codemirror_mode":{"name":"ipython","version":3},"file_extension":".py","mimetype":"text/x-python","name":"python","nbconvert_exporter":"python","pygments_lexer":"ipython3","version":"3.8.8"},"colab":{"provenance":[{"file_id":"https://github.com/zuzhaoye/vehicle-routing-problem-vrp-Clarke-Wright-Savings-Method/blob/master/cw_algorithm.ipynb","timestamp":1709143460116}]}},"nbformat":4,"nbformat_minor":0}