{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNOj9nlh9J3NCn/x4pflwHt"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","source":["import random\n","import numpy as np"],"metadata":{"id":"dau8ysoSUW-R","executionInfo":{"status":"ok","timestamp":1711151980387,"user_tz":240,"elapsed":200,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":170,"outputs":[]},{"cell_type":"code","source":["class Item():\n","\n","  def __init__(self, name, value, weight):\n","    self.value = value\n","    self.weight = weight\n","    self.name = name\n","\n","  def __repr__(self):\n","    return str(self)\n","\n","  def __str__(self):\n","    return f\"<{self.name}> ({self.value} $, {self.weight} kg)\""],"metadata":{"id":"etWd4oeBP8SF","executionInfo":{"status":"ok","timestamp":1711151980387,"user_tz":240,"elapsed":5,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":171,"outputs":[]},{"cell_type":"code","source":["class KnapsackProblem():\n","\n","  def __init__(self, capacity, objects):\n","    self.capacity = capacity\n","    self.objects = objects\n","\n","  @staticmethod\n","  def create_random_problem():\n","    min_n_items = 5\n","    max_n_items = 15\n","    min_capacity = 1\n","    max_capacity = 20\n","    min_weight = 1\n","    max_weight = 10\n","    min_value = 1\n","    max_value = 100\n","    items = [Item(f\"Item_{i}\", random.randint(min_value, max_value), random.randint(min_weight, max_weight)) for i in range(random.choice([min_n_items, max_n_items]))]\n","    return KnapsackProblem(random.randint(min_capacity, max_capacity), items)\n","\n","  def get_value_list(self):\n","    return [i.value for i in self.objects]\n","\n","  def get_weight_list(self):\n","    return [i.weight for i in self.objects]\n","\n","  def get_n_objects(self):\n","    return len(self.objects)"],"metadata":{"id":"_-CEJJpWQGG2","executionInfo":{"status":"ok","timestamp":1711151980387,"user_tz":240,"elapsed":5,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":172,"outputs":[]},{"cell_type":"code","execution_count":200,"metadata":{"id":"4oQeCzVgPlHz","executionInfo":{"status":"ok","timestamp":1711152503533,"user_tz":240,"elapsed":175,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"outputs":[],"source":["class GeneticSolver():\n","\n","  def __init__(self, n_pop=10, selection_rate=0.4,mutation_prob=0.2):\n","    self.population = []\n","    self.n_pop = n_pop\n","    self.problem = None\n","    self.selection_rate = selection_rate\n","    self.mutation_prob = mutation_prob\n","\n","  def __one_point_crossover(self, n, parent_1, parent_2):\n","    return (\n","        np.hstack([parent_1[:n], parent_2[n:]]),\n","        np.hstack([parent_2[:n], parent_1[n:]])\n","    )\n","\n","  def __bitwise_mutation(self, candidate):\n","    for i in range(len(candidate)):\n","      if random.random() < self.mutation_prob:\n","        candidate[i] = (candidate[i]+1)%2\n","    return candidate\n","\n","  def __fitness(self, solution):\n","    total_value = sum(np.array(self.problem.get_value_list())*np.array(solution))\n","    total_weight = sum(np.array(self.problem.get_weight_list())*np.array(solution))\n","    if total_weight > self.problem.capacity:\n","      return 0\n","    return total_value\n","\n","  def create_random_solution(self, n):\n","    return np.array(random.choices([0, 1], k=n))\n","\n","  def __create_population(self):\n","    new_population = []\n","    while len(new_population) < self.n_pop:\n","      new_pob = self.create_random_solution(self.problem.get_n_objects())\n","      if not self.check_arr_in_arrs(new_pob, new_population): new_population += [new_pob]\n","    return new_population\n","\n","  def __hard_selection(self, fitness_arr: np.array, n):\n","    return sorted(list(zip(self.population, fitness_arr)), key=lambda x: x[1], reverse=True)[:n]\n","\n","  def __soft_selection(self, fitness_arr: np.array, n):\n","    farr = fitness_arr+1\n","    p = farr/sum(farr)\n","    selected_idx = np.random.choice([i for i in range(self.n_pop)], size=n, p=p, replace=False)\n","    return [self.population[i] for i in range(self.n_pop) if i in selected_idx]\n","\n","  @staticmethod\n","  def check_arr_in_arrs(arr: np.array, arrs: list):\n","    return str(arr) in [str(i) for i in arrs]\n","\n","  def __refill_population(self, best_pob, n_refill):\n","    refill_population = []\n","    while len(refill_population) < n_refill:\n","      n = random.randint(1, self.problem.get_n_objects() - 2)\n","      p1_idx, p2_idx = np.random.choice([i for i in range(len(best_pob))], size=2, replace=False)\n","      parent1, parent2 = best_pob[p1_idx], best_pob[p2_idx]\n","      child1, child2 = self.__one_point_crossover(n, parent1, parent2)\n","      mchild1, mchild2 = self.__bitwise_mutation(child1), self.__bitwise_mutation(child2)\n","      if not self.check_arr_in_arrs(mchild1, refill_population): refill_population += [mchild1]\n","      if not self.check_arr_in_arrs(mchild2, refill_population): refill_population += [mchild2]\n","    return refill_population[:n_refill]\n","\n","  def solve(self, problem, epochs=20):\n","\n","    self.problem = problem\n","    self.population = self.__create_population()\n","    n_selected = int(np.ceil(self.selection_rate * self.n_pop))\n","\n","    for _  in range(epochs):\n","      fitness_arr = np.array([self.__fitness(pob) for pob in self.population])\n","      best_pob = self.__soft_selection(fitness_arr, n_selected)\n","      refill_population = self.__refill_population(best_pob, self.n_pop - n_selected)\n","      self.population = best_pob + refill_population\n","\n","    fitness_arr = np.array([self.__fitness(pob) for pob in self.population])\n","    return self.__hard_selection(fitness_arr, 1)\n",""]},{"cell_type":"code","source":["problem = KnapsackProblem.create_random_problem()"],"metadata":{"id":"-G6cSu7IVCh7","executionInfo":{"status":"ok","timestamp":1711152044465,"user_tz":240,"elapsed":180,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":179,"outputs":[]},{"cell_type":"code","source":["problem.capacity = 20"],"metadata":{"id":"ALB9kPhiVrw3","executionInfo":{"status":"ok","timestamp":1711152638123,"user_tz":240,"elapsed":188,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":208,"outputs":[]},{"cell_type":"code","source":["problem.objects"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"2-UA-GjQVJab","executionInfo":{"status":"ok","timestamp":1711152045583,"user_tz":240,"elapsed":2,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"3f5926a6-0c1e-412d-bca0-b3f06558c697"},"execution_count":181,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[<Item_0> (20 $, 5 kg),\n"," <Item_1> (64 $, 4 kg),\n"," <Item_2> (48 $, 1 kg),\n"," <Item_3> (44 $, 4 kg),\n"," <Item_4> (24 $, 4 kg),\n"," <Item_5> (38 $, 5 kg),\n"," <Item_6> (94 $, 3 kg),\n"," <Item_7> (88 $, 10 kg),\n"," <Item_8> (49 $, 3 kg),\n"," <Item_9> (24 $, 3 kg),\n"," <Item_10> (65 $, 3 kg),\n"," <Item_11> (4 $, 9 kg),\n"," <Item_12> (2 $, 3 kg),\n"," <Item_13> (68 $, 9 kg),\n"," <Item_14> (42 $, 7 kg)]"]},"metadata":{},"execution_count":181}]},{"cell_type":"code","source":["solver = GeneticSolver(n_pop=100, selection_rate=0.1, mutation_prob=0.05)\n","solver.solve(problem)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"BAPJOvnnRB5k","executionInfo":{"status":"ok","timestamp":1711152651250,"user_tz":240,"elapsed":8497,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"02154dd6-d9ab-425a-fcd1-3f43d4f13b33"},"execution_count":209,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(array([0, 0, 1, 0, 0, 0, 1, 0, 1, 0, 1, 0, 0, 1, 0]), 324)]"]},"metadata":{},"execution_count":209}]},{"cell_type":"code","source":["solver.solve(problem, epochs=40)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4-T8IXQvmjw5","executionInfo":{"status":"ok","timestamp":1711152666433,"user_tz":240,"elapsed":15191,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"87b06cdc-bbf3-4ed0-8772-106f6f0d119a"},"execution_count":210,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(array([0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0]), 364)]"]},"metadata":{},"execution_count":210}]},{"cell_type":"code","source":["solver.solve(problem, epochs=100)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"shgTuXK9ml1p","executionInfo":{"status":"ok","timestamp":1711152704836,"user_tz":240,"elapsed":38412,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"281be2d9-9ba4-4c10-8ab4-8dfd16fb8bc3"},"execution_count":211,"outputs":[{"output_type":"execute_result","data":{"text/plain":["[(array([0, 1, 1, 1, 0, 0, 1, 0, 1, 0, 1, 0, 0, 0, 0]), 364)]"]},"metadata":{},"execution_count":211}]}]}