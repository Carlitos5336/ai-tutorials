{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"provenance":[],"authorship_tag":"ABX9TyNTC2XTJeLwLN6MTa+6d3Cc"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","execution_count":179,"metadata":{"id":"s7haQyaZx9GC","executionInfo":{"status":"ok","timestamp":1674526381459,"user_tz":240,"elapsed":161,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"outputs":[],"source":["import random\n","\n","class CSP:\n","\n","  def __init__(self, X, D, C):\n","    \"\"\"\n","    X: grafo (variables)\n","    D: lista de valores de posibles que acepta cada nodo\n","    C: una lista de funciones restrictivas\n","    \"\"\"\n","    self.X = X\n","    self.D = D\n","    self.C = C\n","    for node in self.X.get_nodes():\n","      node.domain = D.copy()\n","\n","  def is_complete(self):\n","    return all([node.is_assigned() for node in self.X.get_nodes()])\n","\n","  def get_unassigned_variables(self):\n","    return [node for node in self.X.get_nodes() if not node.is_assigned()]\n","\n","  def get_assigned_variables(self):\n","    return [node for node in self.X.get_nodes() if node.is_assigned()]\n","\n","  def select_unassigned_variable(self):\n","    return random.choice(self.get_unassigned_variables())\n","\n","  def is_arc_consistent(self, var_i, var_j):\n","    return all([constraint(var_i, var_j) for constraint in self.C])\n","\n","  def is_var_consistent(self, var):\n","    return all([self.is_arc_consistent(var, neigh) for neigh in self.X.get_neighbors_of(var.name) if neigh.is_assigned()])\n","\n","  def get_variables_values(self):\n","    return {node.name: node.value for node in self.X.get_nodes()}\n","    "]},{"cell_type":"code","source":["class MapColoringCSP(CSP):\n","\n","  def __init__(self, X, D):\n","    super().__init__(X, D, [self.is_pair_different])\n","\n","  @staticmethod\n","  def is_pair_different(var_i, var_j):\n","    return var_i.value != var_j.value"],"metadata":{"id":"9vEBuIlg6rAH","executionInfo":{"status":"ok","timestamp":1674526384075,"user_tz":240,"elapsed":181,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":180,"outputs":[]},{"cell_type":"code","source":["class SudokuCSP(CSP):\n","\n","  def __init__(self):\n","    self.columns = [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]\n","    self.rows = [\"1\", \"2\", \"3\", \"4\", \"5\", \"6\", \"7\", \"8\", \"9\"]\n","    super().__init__(self.create_board(), [str(i) for i in range(1, 10)], [self.is_pair_different])\n","\n","  def create_board(self): \n","    g = Graph()\n","    for cell_name in self.get_all_possible_cell_names():\n","      g.add_node(cell_name)\n","    for node in g.get_nodes():\n","      # Row neighbors\n","      for neigh in self.get_row_neighbors(node.name):\n","        g.add_vertex(node.name, neigh)\n","      # Column neighbors\n","      for neigh in self.get_column_neighbors(node.name):\n","        g.add_vertex(node.name, neigh)\n","      # Box neighbors\n","      for neigh in self.get_box_neighbors(node.name):\n","        g.add_vertex(node.name, neigh)\n","    return g\n","\n","  def get_all_possible_cell_names(self):\n","    cells = []\n","    for column in self.columns:\n","      for row in self.rows:\n","        cells.append(column + row)\n","    return cells\n","\n","  def get_row_neighbors(self, name):\n","    return [column + name[1] for column in self.columns if column != name[0]]\n","\n","  def get_column_neighbors(self, name):\n","    return [name[0] + row for row in self.rows if row != name[1]]\n","\n","  def get_box_of(self, name):\n","    col_idx = self.columns.index(name[0])\n","    row_idx = self.rows.index(name[1])\n","    return str(col_idx//3) + str(row_idx//3)\n","\n","  def get_box_neighbors(self, name):\n","    box = self.get_box_of(name)\n","    return [cell_name for cell_name in self.get_all_possible_cell_names() if box == self.get_box_of(cell_name) and name != cell_name]\n","\n","  def assign_value_to_cell(self, cell_name, value):\n","    self.X.get_node_by_name(cell_name).assign(value)\n","\n","  def show_board(self):\n","    for idx, node in enumerate(self.X.get_nodes(), 1):\n","      val = str(node.value) if node.value != None else \".\"\n","      print(val, \"\", end=\"\")\n","      if(idx%9 == 0): print()\n","      elif(idx%3 == 0): print(\"| \", end=\"\")\n","      if(idx%27 == 0 and idx != 81): print(\"— \" * 11)\n","\n","  def read_txt(self, filename):\n","    with open(filename) as file:\n","      for row, line in enumerate(file.readlines()):\n","        for col, val in enumerate(line.replace(\"\\n\", \"\")):\n","          cell_name = self.columns[col] + self.rows[row]\n","          val = val if val != \"0\" else None\n","          self.assign_value_to_cell(cell_name, val)\n","\n","  @staticmethod\n","  def is_pair_different(var_i, var_j):\n","    return var_i.value != var_j.value\n"],"metadata":{"id":"NOTf8Nu8QcXN","executionInfo":{"status":"ok","timestamp":1674526385188,"user_tz":240,"elapsed":183,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":181,"outputs":[]},{"cell_type":"code","source":["class Node:\n","\n","  def __init__(self, name, value=None):\n","    self.name = name\n","    self.value = value\n","    self.domain = []\n","\n","  def is_assigned(self):\n","    return self.value != None\n","    \n","  def assign(self, value):\n","    self.value = value\n","\n","  def unassign(self):\n","    self.value = None\n","\n","  def get_domain(self):\n","    return self.domain"],"metadata":{"id":"5-fx9PT41B2i","executionInfo":{"status":"ok","timestamp":1674526388425,"user_tz":240,"elapsed":166,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":182,"outputs":[]},{"cell_type":"code","source":["class Graph:\n","\n","  def __init__(self):\n","    self.adj_list = {}\n","    self.nodes = {}\n","\n","  def add_node(self, name, value=None):\n","    self.nodes[name] = Node(name, value)\n","    self.adj_list[name] = {}\n","\n","  def add_vertex(self, name_a, name_b, w=1, directed=False):\n","    if name_a not in self.adj_list.keys(): self.add_node(name_a)\n","    if name_b not in self.adj_list.keys(): self.add_node(name_b)\n","    self.adj_list[name_a][name_b] = w\n","    if not directed: self.adj_list[name_b][name_a] = w\n","\n","  def get_nodes(self):\n","    return list(self.nodes.values())\n","\n","  def get_node_by_name(self, name):\n","    return self.nodes[name]\n","\n","  def get_neighbors_of(self, node_name):\n","    return [self.get_node_by_name(neigh_name) for neigh_name in self.adj_list[node_name].keys()]"],"metadata":{"id":"Jjyo6p680-xq","executionInfo":{"status":"ok","timestamp":1674526389647,"user_tz":240,"elapsed":203,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":183,"outputs":[]},{"cell_type":"code","source":["class BacktrackSolver:\n","\n","  def __init__(self, csp):\n","    self.csp = csp\n","\n","  def solve(self):\n","    return self.backtrack()\n","\n","  def backtrack(self):\n","    if self.csp.is_complete(): return True\n","    var = self.csp.select_unassigned_variable()\n","    for value in var.get_domain():\n","      var.assign(value)\n","      if self.csp.is_var_consistent(var):\n","        result = self.backtrack()\n","        if result: return result\n","      var.unassign()\n","    return False\n"],"metadata":{"id":"l2fhRrBg8zGt","executionInfo":{"status":"ok","timestamp":1674526391386,"user_tz":240,"elapsed":163,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":184,"outputs":[]},{"cell_type":"code","source":["g = Graph()\n","g.add_vertex(\"WA\", \"NT\")\n","g.add_vertex(\"WA\", \"SA\")\n","g.add_vertex(\"SA\", \"NT\")\n","g.add_vertex(\"QLD\", \"NT\")\n","g.add_vertex(\"QLD\", \"SA\")\n","g.add_vertex(\"QLD\", \"NSW\")\n","g.add_vertex(\"NSW\", \"SA\")\n","g.add_vertex(\"VIC\", \"NSW\")\n","g.add_vertex(\"VIC\", \"SA\")"],"metadata":{"id":"GhTUGAhM6FRJ","executionInfo":{"status":"ok","timestamp":1674526393374,"user_tz":240,"elapsed":170,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":185,"outputs":[]},{"cell_type":"code","source":["g.adj_list"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"hW-iumTkEHof","executionInfo":{"status":"ok","timestamp":1674526395332,"user_tz":240,"elapsed":180,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"d4d1a2e7-c193-4236-c4b0-de4f5093ef4e"},"execution_count":186,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'WA': {'NT': 1, 'SA': 1},\n"," 'NT': {'WA': 1, 'SA': 1, 'QLD': 1},\n"," 'SA': {'WA': 1, 'NT': 1, 'QLD': 1, 'NSW': 1, 'VIC': 1},\n"," 'QLD': {'NT': 1, 'SA': 1, 'NSW': 1},\n"," 'NSW': {'QLD': 1, 'SA': 1, 'VIC': 1},\n"," 'VIC': {'NSW': 1, 'SA': 1}}"]},"metadata":{},"execution_count":186}]},{"cell_type":"code","source":["csp = MapColoringCSP(g, [\"RED\", \"BLUE\", \"GREEN\"])\n","csp.get_variables_values()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"8cnSUNBKEaH6","executionInfo":{"status":"ok","timestamp":1674526407851,"user_tz":240,"elapsed":200,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"34718676-c86f-4dac-89f3-2d097fa97f77"},"execution_count":189,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'WA': None, 'NT': None, 'SA': None, 'QLD': None, 'NSW': None, 'VIC': None}"]},"metadata":{},"execution_count":189}]},{"cell_type":"code","source":["solver = BacktrackSolver(csp)\n","solver.solve()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"Gemlvv_wEo-9","executionInfo":{"status":"ok","timestamp":1674526408504,"user_tz":240,"elapsed":1,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"029a6ab6-3c88-4242-b3be-ad123ca2a54b"},"execution_count":190,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":190}]},{"cell_type":"code","source":["csp.get_variables_values()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"wClhFNB5IalL","executionInfo":{"status":"ok","timestamp":1674526410701,"user_tz":240,"elapsed":154,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"6e5ccb01-5e10-4a3e-d4f8-3eb465c937db"},"execution_count":191,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'WA': 'RED',\n"," 'NT': 'BLUE',\n"," 'SA': 'GREEN',\n"," 'QLD': 'RED',\n"," 'NSW': 'BLUE',\n"," 'VIC': 'RED'}"]},"metadata":{},"execution_count":191}]},{"cell_type":"code","source":["colors = list(csp.get_variables_values().values())"],"metadata":{"id":"bl2sZM07FC1Q","executionInfo":{"status":"ok","timestamp":1674526413156,"user_tz":240,"elapsed":168,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":192,"outputs":[]},{"cell_type":"code","source":["colors"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"m2dTCipIHItn","executionInfo":{"status":"ok","timestamp":1674526413818,"user_tz":240,"elapsed":191,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"140c548e-a5ba-4e3b-836c-f88e1237c101"},"execution_count":193,"outputs":[{"output_type":"execute_result","data":{"text/plain":["['RED', 'BLUE', 'GREEN', 'RED', 'BLUE', 'RED']"]},"metadata":{},"execution_count":193}]},{"cell_type":"code","source":["!pip install networkx"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"sNJYwCeoFwb4","executionInfo":{"status":"ok","timestamp":1674518674322,"user_tz":240,"elapsed":5090,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"755fe870-6392-4701-d43f-66438225410d"},"execution_count":58,"outputs":[{"output_type":"stream","name":"stdout","text":["Looking in indexes: https://pypi.org/simple, https://us-python.pkg.dev/colab-wheels/public/simple/\n","Requirement already satisfied: networkx in /usr/local/lib/python3.8/dist-packages (3.0)\n"]}]},{"cell_type":"code","source":["import networkx as nx\n","\n","ng = nx.Graph()\n","ng.add_edge(\"WA\", \"NT\")\n","ng.add_edge(\"WA\", \"SA\")\n","ng.add_edge(\"SA\", \"NT\")\n","ng.add_edge(\"QLD\", \"NT\")\n","ng.add_edge(\"QLD\", \"SA\")\n","ng.add_edge(\"QLD\", \"NSW\")\n","ng.add_edge(\"NSW\", \"SA\")\n","ng.add_edge(\"VIC\", \"NSW\")\n","ng.add_edge(\"VIC\", \"SA\")"],"metadata":{"id":"jmdodZp5Fy0I","executionInfo":{"status":"ok","timestamp":1674526416259,"user_tz":240,"elapsed":169,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":194,"outputs":[]},{"cell_type":"code","source":["csp.get_variables_values()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"RvgorvHaHUgY","executionInfo":{"status":"ok","timestamp":1674526419502,"user_tz":240,"elapsed":159,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"c55978b9-5409-4890-e221-a77d913b9e5a"},"execution_count":195,"outputs":[{"output_type":"execute_result","data":{"text/plain":["{'WA': 'RED',\n"," 'NT': 'BLUE',\n"," 'SA': 'GREEN',\n"," 'QLD': 'RED',\n"," 'NSW': 'BLUE',\n"," 'VIC': 'RED'}"]},"metadata":{},"execution_count":195}]},{"cell_type":"code","source":["nx.draw_networkx(ng, node_color=colors, font_color=\"white\", node_size=700)"],"metadata":{"colab":{"base_uri":"https://localhost:8080/","height":248},"id":"j8Vtga9XGLbE","executionInfo":{"status":"ok","timestamp":1674526421744,"user_tz":240,"elapsed":426,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"caa0a6af-4207-4102-d5dc-2562ad33a7a3"},"execution_count":196,"outputs":[{"output_type":"display_data","data":{"text/plain":["<Figure size 432x288 with 1 Axes>"],"image/png":"\n"},"metadata":{}}]},{"cell_type":"code","source":["sudoku = SudokuCSP()\n","sudoku.read_txt(\"sudoku.txt\")"],"metadata":{"id":"NO6OS1l_TDJY","executionInfo":{"status":"ok","timestamp":1674526426571,"user_tz":240,"elapsed":150,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}}},"execution_count":197,"outputs":[]},{"cell_type":"code","source":["sudoku.show_board()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"oja8czsiX4Ei","executionInfo":{"status":"ok","timestamp":1674526428114,"user_tz":240,"elapsed":176,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"8a1784a5-a176-4c33-8143-056a6a2e1764"},"execution_count":198,"outputs":[{"output_type":"stream","name":"stdout","text":[". . 3 | 7 . 6 | 9 . 5 \n","7 5 4 | 9 . 8 | 1 3 6 \n",". 9 . | 5 3 . | 4 . 7 \n","— — — — — — — — — — — \n","5 2 . | . 6 . | 8 7 4 \n","8 . . | . 9 . | 3 . 2 \n","3 . 6 | . 7 2 | 5 1 9 \n","— — — — — — — — — — — \n",". 3 5 | 6 1 7 | . 4 . \n","2 . . | 3 . . | 7 9 1 \n",". . 7 | 2 . . | 6 5 3 \n"]}]},{"cell_type":"code","source":["solver = BacktrackSolver(sudoku)\n","solver.solve()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"4cTblg0EbWlY","executionInfo":{"status":"ok","timestamp":1674526432018,"user_tz":240,"elapsed":172,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"63b2d4f0-ef02-4732-c999-f962a5772047"},"execution_count":199,"outputs":[{"output_type":"execute_result","data":{"text/plain":["True"]},"metadata":{},"execution_count":199}]},{"cell_type":"code","source":["sudoku.show_board()"],"metadata":{"colab":{"base_uri":"https://localhost:8080/"},"id":"tB-4BtcFbhVH","executionInfo":{"status":"ok","timestamp":1674526433849,"user_tz":240,"elapsed":177,"user":{"displayName":"Carlos Bienvenido Ogando Montás (Carlitos5336)","userId":"10505299496410393010"}},"outputId":"7209d2ce-6dec-4b81-9665-b70e74ad6f30"},"execution_count":200,"outputs":[{"output_type":"stream","name":"stdout","text":["1 8 3 | 7 4 6 | 9 2 5 \n","7 5 4 | 9 2 8 | 1 3 6 \n","6 9 2 | 5 3 1 | 4 8 7 \n","— — — — — — — — — — — \n","5 2 9 | 1 6 3 | 8 7 4 \n","8 7 1 | 4 9 5 | 3 6 2 \n","3 4 6 | 8 7 2 | 5 1 9 \n","— — — — — — — — — — — \n","9 3 5 | 6 1 7 | 2 4 8 \n","2 6 8 | 3 5 4 | 7 9 1 \n","4 1 7 | 2 8 9 | 6 5 3 \n"]}]}]}